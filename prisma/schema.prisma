generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  GUEST
}

enum OrderStatus {
  PENDING    // Chờ xác nhận
  CONFIRMED  // Đã xác nhận
  PROCESSING // Đang xử lý
  SHIPPING   // Đang giao hàng
  COMPLETED  // Đã hoàn thành
  CANCELLED  // Đã hủy
}

enum PaymentStatus {
  PENDING   // Chờ thanh toán
  PAID      // Đã thanh toán
  FAILED    // Thanh toán thất bại
  REFUNDED  // Đã hoàn tiền
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  firebaseUid   String?   @unique // ID từ Firebase Authentication
  phone         String?
  address       String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  reviews       Review[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  cart          Cart?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Car {
  id              String      @id @default(cuid())
  name            String
  brand           String
  model           String
  year            Int
  price           Float
  color           String
  category        String      // SUV, Sedan, Coupe,...
  images          String[]    // Mảng các URL ảnh từ Cloudinary
  description     String      @db.Text
  features        String[]    // Các tính năng của xe
  specifications  Json?       // Thông số kỹ thuật chi tiết
  stock           Int         @default(1)
  isAvailable     Boolean     @default(true)
  viewCount       Int         @default(0)
  seo             Json?       // Thông tin SEO
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  cartItems       CartItem[]
  orderItems      OrderItem[]
  reviews         Review[]

  @@index([brand])
  @@index([category])
  @@index([price])
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  car       Car      @relation(fields: [carId], references: [id])
  carId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, carId])
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique @default(cuid()) // Số đơn hàng hiển thị cho khách
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  items           OrderItem[]
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  paymentId       String?       // Mã giao dịch từ cổng thanh toán
  totalAmount     Float
  shippingName    String
  shippingPhone   String
  shippingAddress String
  deliveryDate    DateTime?     // Ngày giao xe dự kiến
  note            String?       @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@index([orderNumber])
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  car       Car      @relation(fields: [carId], references: [id])
  carId     String
  quantity  Int
  price     Float    // Giá tại thời điểm đặt hàng
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([carId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 sao
  comment   String?  @db.Text
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, carId]) // Một user chỉ được review một xe một lần
  @@index([carId])
  @@index([userId])
} 