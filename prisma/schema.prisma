generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  reviews       Review[]
  cartItems     CartItem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Car {
  id          String      @id @default(cuid())
  name        String
  brand       String
  model       String
  year        Int
  price       Float
  color       String
  type        String
  images      String
  description String
  stock       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]

  @@index([brand])
  @@index([type])
  @@index([price])
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  carId     String
  quantity  Int
  price     Float
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, carId])
  @@index([userId])
  @@index([carId])
}

model Order {
  id              String        @id @default(cuid())
  userId          String
  items           OrderItem[]
  status          String        @default("PENDING")
  paymentStatus   String        @default("PENDING")
  paymentMethod   String
  totalAmount     Float
  shippingName    String
  shippingPhone   String
  shippingAddress String
  note            String?
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  carId     String
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([carId])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  carId     String
  rating    Int
  comment   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, carId])
  @@index([userId])
  @@index([carId])
} 